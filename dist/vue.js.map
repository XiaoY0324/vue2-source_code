{"version":3,"file":"vue.js","sources":["../src/utils.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/initMixin.js","../src/index.js"],"sourcesContent":["export function isFunction(val) {\n  return typeof val === 'function';\n}\n\nexport function isObject(val) {\n  return typeof val !== 'null' && typeof val === 'object'; \n}\n\nexport function isArray(val) {\n  return Object.prototype.toString.call(val) === '[object Array]';\n}","// 这里不对数组原型做操作，只针对 data 中的数组，增加了一层方法拦截\n let oldArrayPrototype = Array.prototype; \n// 挂载老的原型对象到 arrayMethod 上，arrayMethod.__proto__ 能拿到 oldArrayPrototype\nlet arrayMethod = Object.create(oldArrayPrototype); \n\n// 只有这七个方法修改了原数组 所以要重写\nlet methods = ['push', 'pop', 'splice', 'shift', 'unshift', 'reverse', 'sort'];\n\nmethods.forEach(method => {\n  // 先找自己身上，找不到去原型对象上找「arrayMethod 的原型对象是 oldArrayPrototype」\n  // 比如 push 方法可以传多个参数，所以这里通过扩展运算符拿到参数列表\n  arrayMethod[method] = function(...args) {\n    console.log('数组的方法进行重写');\n    // 调用原有数组方法\n    oldArrayPrototype[method].call(this, ...args);\n\n    let inserted = null; // 新插入的元素\n\n    // 对新增的元素进行重新劫持，新增数组元素的方法只有 splice、push、unshift\n    switch(method) {\n      case 'splice':\n        // splice 第二个参数后，就是新增的元素\n        inserted = args.slice(2);\n      case 'push':\n      case 'unshift':\n        // push 和 unshift 传入的元素即为新增元素\n        inserted = args;\n        break;\n    }\n\n    // 遍历 inserted，需要劫持的增加数据劫持，但是数据劫持的方法在 Observer 类上\n    // 我们取巧的把 Observer 类的实例挂载到当前操作的数组上 叫 __ob__，具体见 Observer 中实现\n    let ob = this.__ob__;\n\n    // 接着劫持 本身是个数组\n    if (inserted) ob.observeArray(inserted);\n  }\n});\n\nexport default arrayMethod;","import { isArray, isObject } from \"../utils\";\nimport arrayMethod from \"./array\";\n\n// 观察者类\nclass Observer {\n  constructor(val) {\n    // 给对象和数组添加一个自定义属性，用于数组新增元素时的再次劫持\n    // 不过切记 __ob__ 属性不能被枚举，不然如果 val 是个对象的话，就会把 __ob__ 也劫持\n    // 这也是我们看到所有的 Vue 变量都有 __ob__ 属性的原因\n    Object.defineProperty(val, '__ob__', {\n      value: this,\n      enumerable: false\n    });\n\n    if (isArray(val)) {\n      // 如果是 val 数组，修改原型方法 这里就不考虑兼容 ie 了\n      // 这里只针对 data 中的数组，没有重写 Array.prototype 上的方法\n      val.__proto__ = arrayMethod;\n      this.observeArray(val);\n    } else {\n      this.walk(val); // 遍历属性进行劫持\n    }\n  }\n\n  // 递归遍历数组，对数组内部的对象再次重写 比如 [{}]  [[]]\n  // 需要注意的是: 数组套对象的话，修改对象属性，也会触发更新，比如：\n  // vm.arr[0].a = 100 ----> 触发更新\n  // vm.arr[0] = 100   ----> 不会触发更新\n  observeArray(val) {\n    // 调用 observe 方法，数组内元素如果不是对象，则不会劫持\n    val.forEach(itm => observe(itm));\n  }\n\n  // 遍历对象\n  walk(data) {\n    Object.keys(data).forEach(key => {\n      // 使用 defineProperty 重新定义\n      defineReactive(data, key, data[key]);\n    })\n  }\n}\n\n// vue2 慢的一个原因\n// 这里引出几条 vue2 的性能优化原则\n//   @1 不要把所有的数据都放在 data 中，闭包过多会损耗性能\n//   @2 尽量扁平化数据，不要嵌套多次，递归影响性能\n//   @3 不要频繁获取数据，会触发 get 方法，走 get 方法中的全部逻辑\n//   @4 如果数据某属性不需要响应式，可以使用 Object.freeze 冻结属性「源码里会跳过 defineReactive」\nfunction defineReactive(obj, key, value) {\n  observe(value); // 递归进行劫持\n  Object.defineProperty(obj, key, {\n    get() {\n      // 这里就形成一个闭包，每次执行 defineReactive 上下文都不会被释放\n      // 所以这就是 vue2 的性能瓶颈\n      return value;\n    },\n    set(newValue) {\n      if (newValue == value) return;\n      console.log('触发set方法');\n      // 设置新值重新劫持 \n      observe(newValue); \n      value = newValue;\n    }\n  });\n}\n\nexport function observe(data) {\n  // 如果不是对象，直接返回「非对象类型不进行递归劫持」\n  if (!isObject(data)) return;\n\n  // 如果被劫持过，就不再进行劫持了\n  if (data.__ob__) return;\n\n  // 如果一个数据被劫持过了，就不要重复劫持了，这里用类来实现\n  // 劫持过的对象 把类的实例挂在到 data.__ob__\n  return new Observer(data);\n}","import { observe } from \"./observe\";\nimport { isFunction } from \"./utils\";\n\n// 统一的数据的初始化分发\nexport function initState(vm) {\n  const options = vm.$options;\n\n  if (options.data) {\n    initData(vm);\n  }\n}\n\n// 代理 -> 使用 vm.info 取到 vm.data.info「劫持过的 info」\nfunction proxyFn(vm, key, source) {\n  Object.defineProperty(vm, key, {\n    get() {\n      return vm[source][key]\n    },\n    set(newVal) {\n      vm[source][key] = newVal;\n    }\n  });\n}\n\nfunction initData(vm) {\n  // 数据的初始化\n\n  // 注意 data 可能是个对象 也可能是个函数\n  //   + 对象：根实例\n  //   + 函数：页面组件互相之间的数据隔离\n  let data = vm.$options.data;\n\n  // 注意修正 this，防止 data 函数执行 this 指向 window\n  // 把 data 赋值给 vm 实例一个变量上，这里取名 _data，作为实例的属性数据源\n  data = vm._data = isFunction(data) ? data.call(vm) : data;\n\n  // 数据劫持\n  observe(data);\n\n  // 取 data.info => vm._data.info 做了一层代理获取到劫持后的 info\n  // 这也是 vue 中我们可以用 this 访问和修改 data 中数据的原因\n  for (let key in data) {\n    proxyFn(vm, key, '_data');\n  }\n\n  console.log(data);\n}","import { initState } from \"./state\";\n\nexport function initMixin(Vue) {\n  // 后续组件化开发的时候，Vue.extend 可以创造一个子组件，子组件也可以调用 _init 方法\n  Vue.prototype._init = function(options) {\n    const vm = this;\n    \n    // 注意调用的时候是 实例._init, 所以这里的 this 指的是实例本身 \n    // 把用户的配置放到实例上, 这样在其他方法中都可以共享 options 了\n    vm.$options = options;\n\n    // 因为数据的来源有很多种，比如 data、props、computed 等，我们要做一个统一的数据的初始化『数据劫持』\n    initState(vm);\n\n    if (vm.$options.el) {\n      // 要将数据挂载到页面上『模板解析』\n      console.log('页面要挂载');\n\n      // 现在数据已经被劫持了，数据变化需要更新视图(diff 算法更新需要更新的部分)\n      // 在 vue2 中，使用的是更符合前端思维的 template 而不是更灵活的 JSX\n      // vue3 template 写起来性能会高一些，内部做了很多优化，所以在 vue3 里面尽量不要使用 jsx\n\n      // 挂载到的 DOM 节点，其实最终用的都是 $mount 方法\n      // 处理 new Vue({ el })  写法\n      vm.$mount(vm.$options.el);\n    } \n  }\n\n  // 挂载节点的方法(如果 options 中不传 el 的话)\n  // 兼容 new Vue({}).$mount(el) 这种写法\n  Vue.prototype.$mount = function(el) {\n    const vm = this;\n    el = document.querySelector(el); // 获取真实节点\n  }\n}","import { initMixin } from './initMixin'; \n\nfunction Vue(options) {\n  this._init(options);\n}\n\n// 在 Vue 原型链上扩展方法 \ninitMixin(Vue);\n\nexport default Vue;"],"names":["isFunction","val","isObject","isArray","Object","prototype","toString","call","oldArrayPrototype","Array","arrayMethod","create","methods","forEach","method","args","console","log","inserted","slice","ob","__ob__","observeArray","Observer","constructor","defineProperty","value","enumerable","__proto__","walk","itm","observe","data","keys","key","defineReactive","obj","get","set","newValue","initState","vm","options","$options","initData","proxyFn","source","newVal","_data","initMixin","Vue","_init","el","$mount","document","querySelector"],"mappings":"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"}